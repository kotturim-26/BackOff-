import Foundation
import CoreBluetooth
import WatchConnectivity

// Enum representing supported Bluetooth commands
enum BluetoothCommand: String {
    case startRight = "START_RIGHT"
    case startLeft = "START_LEFT"
    case startStomach = "START_STOMACH"
    case startBack = "START_BACK"
    case start = "START"
    case stop = "STOP"
    case pause = "PAUSE"
}

final class BluetoothManager: NSObject, ObservableObject, CBCentralManagerDelegate, CBPeripheralDelegate {
    @Published var receivedSleepPosition: String? = nil
    @Published var isConnected: Bool = false
    @Published var calibrationFailed: Bool = false
    @Published var calibrationCancelled: Bool = false
    @Published var thresholdValue: Int? = nil

    private var centralManager: CBCentralManager!
    private var connectedPeripheral: CBPeripheral?
    private var sleepCommandCharacteristic: CBCharacteristic?

    private let sleepServiceUUID = CBUUID(string: "6E400001-B5A3-F393-E0A9-E50E24DCCA9E")
    private let sleepCommandCharacteristicUUID = CBUUID(string: "6E400002-B5A3-F393-E0A9-E50E24DCCA9E")

    override init() {
        super.init()
        centralManager = CBCentralManager(delegate: self, queue: nil)
    }

    // Send command to the Arduino
    func sendCommand(_ command: BluetoothCommand) {
        guard let peripheral = connectedPeripheral,
              let characteristic = sleepCommandCharacteristic,
              peripheral.state == .connected else {
            print("‚ùå Cannot send: peripheral not connected or characteristic not found")
            return
        }

        if let data = command.rawValue.data(using: .utf8) {
            peripheral.writeValue(data, for: characteristic, type: .withResponse)
            print("üì§ Sent command: \(command.rawValue)")
        }
    }

    func reconnect() {
        if centralManager.state == .poweredOn {
            print("üîÅ Reconnecting...")
            centralManager.scanForPeripherals(withServices: [sleepServiceUUID], options: nil)
        }
    }

    // MARK: - CBCentralManagerDelegate

    func centralManagerDidUpdateState(_ central: CBCentralManager) {
        if central.state == .poweredOn {
            print("‚úÖ Bluetooth is powered on. Scanning for peripherals...")
            centralManager.scanForPeripherals(withServices: [sleepServiceUUID], options: nil)
        } else {
            print("‚ùå Bluetooth is not available: \(central.state.rawValue)")
        }
    }

    func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) {
        print("üîç Discovered peripheral: \(peripheral.name ?? "Unknown")")
        centralManager.stopScan()
        connectedPeripheral = peripheral
        peripheral.delegate = self
        centralManager.connect(peripheral, options: nil)
    }

    func centralManager(_ central: CBCentralManager, didConnect peripheral: CBPeripheral) {
        print("‚úÖ Connected to peripheral: \(peripheral.name ?? "Unknown")")
        isConnected = true
        peripheral.discoverServices([sleepServiceUUID])
    }

    func centralManager(_ central: CBCentralManager, didDisconnectPeripheral peripheral: CBPeripheral, error: Error?) {
        print("üîå Disconnected from peripheral: \(peripheral.name ?? "Unknown")")
        isConnected = false
        reconnect()
    }

    // MARK: - CBPeripheralDelegate

    func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {
        if let error = error {
            print("‚ùå Error reading characteristic: \(error.localizedDescription)")
            return
        }

        if characteristic.uuid == CBUUID(string: "6E400003-B5A3-F393-E0A9-E50E24DCCA9E") {
            guard let data = characteristic.value else {
                print("‚ö†Ô∏è No data in characteristic update.")
                return
            }

            if let value = String(data: data, encoding: .utf8) {
                let trimmedValue = value.trimmingCharacters(in: .whitespacesAndNewlines)
                print("üì© Received data: \(trimmedValue)")

                DispatchQueue.main.async {
                    if trimmedValue.contains("CALIBRATION_FAILED") {
                        self.calibrationFailed = true
                        print("‚ö†Ô∏è Calibration failed.")
                    } else if trimmedValue.starts(with: "THRESHOLD:") {
                        let parts = trimmedValue.split(separator: ":")
                        if parts.count == 2, let threshold = Int(parts[1]) {
                            self.thresholdValue = threshold
                            print("üì• Threshold stored: \(threshold)")
                        } else {
                            print("‚ö†Ô∏è Malformed threshold string: \(trimmedValue)")
                        }
                    } else {
                        self.receivedSleepPosition = trimmedValue
                        print("üõèÔ∏è Sleep position data received: \(trimmedValue)")
                    }
                }
            } else {
                print("‚ùå Failed to decode data as UTF-8 string")
            }
        } else {
            print("‚ö†Ô∏è Received update from unexpected characteristic: \(characteristic.uuid)")
        }
    }

    func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: Error?) {
        if let error = error {
            print("‚ùå Error discovering services: \(error.localizedDescription)")
            return
        }

        guard let services = peripheral.services else {
            print("‚ö†Ô∏è No services found.")
            return
        }

        for service in services {
            print("‚úÖ Discovered service: \(service.uuid)")
            peripheral.discoverCharacteristics(nil, for: service)
        }
    }

    func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsFor service: CBService, error: Error?) {
        if let error = error {
            print("‚ùå Error discovering characteristics: \(error.localizedDescription)")
            return
        }

        guard let characteristics = service.characteristics else {
            print("‚ö†Ô∏è No characteristics found for service: \(service.uuid)")
            return
        }

        for characteristic in characteristics {
            print("‚úÖ Discovered characteristic: \(characteristic.uuid)")

            if characteristic.uuid == CBUUID(string: "6E400003-B5A3-F393-E0A9-E50E24DCCA9E") {
                peripheral.setNotifyValue(true, for: characteristic)
                print("üì° Subscribed to notifications for pressure data")
            }

            if characteristic.uuid == CBUUID(string: "6E400002-B5A3-F393-E0A9-E50E24DCCA9E") {
                self.sleepCommandCharacteristic = characteristic
                print("‚úçÔ∏è Ready to send commands")
            }
        }
    }
}

extension BluetoothManager {
    func sendSessionData(_ data: [String: Any]) {
        if WCSession.default.isReachable {
            WCSession.default.sendMessage(data, replyHandler: nil) { error in
                print("‚ùå Failed to send session data: \(error.localizedDescription)")
            }
            print("üì§ Sent session data to phone")
        } else {
            print("‚ö†Ô∏è iPhone is not reachable")
        }
    }
}

